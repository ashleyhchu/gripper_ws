// Generated by gencpp from file test_rosbag/PartiallyMigrated.msg
// DO NOT EDIT!


#ifndef TEST_ROSBAG_MESSAGE_PARTIALLYMIGRATED_H
#define TEST_ROSBAG_MESSAGE_PARTIALLYMIGRATED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <test_rosbag/MigratedExplicit.h>

namespace test_rosbag
{
template <class ContainerAllocator>
struct PartiallyMigrated_
{
  typedef PartiallyMigrated_<ContainerAllocator> Type;

  PartiallyMigrated_()
    : field1(0)
    , field2()
    , field3()
    , field4(0.0)
    , field5(0.0)  {
    }
  PartiallyMigrated_(const ContainerAllocator& _alloc)
    : field1(0)
    , field2(_alloc)
    , field3(_alloc)
    , field4(0.0)
    , field5(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _field1_type;
  _field1_type field1;

   typedef  ::test_rosbag::MigratedExplicit_<ContainerAllocator>  _field2_type;
  _field2_type field2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _field3_type;
  _field3_type field3;

   typedef float _field4_type;
  _field4_type field4;

   typedef double _field5_type;
  _field5_type field5;





  typedef boost::shared_ptr< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> const> ConstPtr;

}; // struct PartiallyMigrated_

typedef ::test_rosbag::PartiallyMigrated_<std::allocator<void> > PartiallyMigrated;

typedef boost::shared_ptr< ::test_rosbag::PartiallyMigrated > PartiallyMigratedPtr;
typedef boost::shared_ptr< ::test_rosbag::PartiallyMigrated const> PartiallyMigratedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_rosbag::PartiallyMigrated_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_rosbag::PartiallyMigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::PartiallyMigrated_<ContainerAllocator2> & rhs)
{
  return lhs.field1 == rhs.field1 &&
    lhs.field2 == rhs.field2 &&
    lhs.field3 == rhs.field3 &&
    lhs.field4 == rhs.field4 &&
    lhs.field5 == rhs.field5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_rosbag::PartiallyMigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::PartiallyMigrated_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_rosbag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45f99fcf57ef956dd2a6a16472643507";
  }

  static const char* value(const ::test_rosbag::PartiallyMigrated_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45f99fcf57ef956dULL;
  static const uint64_t static_value2 = 0xd2a6a16472643507ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_rosbag/PartiallyMigrated";
  }

  static const char* value(const ::test_rosbag::PartiallyMigrated_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32            field1 # 40\n"
"MigratedExplicit field2 # (58.2, \"aldfkja 17\", 82)\n"
"string           field3 # \"radasdk\"\n"
"float32          field4 # 63.4\n"
"float64          field5 # 123.4\n"
"\n"
"================================================================================\n"
"MSG: test_rosbag/MigratedExplicit\n"
"Header  header\n"
"float32 field2 #58.2\n"
"string  combo_field3 #\"aldfkja 17\"\n"
"int32   field4 #82\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::test_rosbag::PartiallyMigrated_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.field1);
      stream.next(m.field2);
      stream.next(m.field3);
      stream.next(m.field4);
      stream.next(m.field5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PartiallyMigrated_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_rosbag::PartiallyMigrated_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_rosbag::PartiallyMigrated_<ContainerAllocator>& v)
  {
    s << indent << "field1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.field1);
    s << indent << "field2: ";
    s << std::endl;
    Printer< ::test_rosbag::MigratedExplicit_<ContainerAllocator> >::stream(s, indent + "  ", v.field2);
    s << indent << "field3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.field3);
    s << indent << "field4: ";
    Printer<float>::stream(s, indent + "  ", v.field4);
    s << indent << "field5: ";
    Printer<double>::stream(s, indent + "  ", v.field5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROSBAG_MESSAGE_PARTIALLYMIGRATED_H
