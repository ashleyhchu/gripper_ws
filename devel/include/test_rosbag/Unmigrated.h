// Generated by gencpp from file test_rosbag/Unmigrated.msg
// DO NOT EDIT!


#ifndef TEST_ROSBAG_MESSAGE_UNMIGRATED_H
#define TEST_ROSBAG_MESSAGE_UNMIGRATED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_rosbag
{
template <class ContainerAllocator>
struct Unmigrated_
{
  typedef Unmigrated_<ContainerAllocator> Type;

  Unmigrated_()
    : field1(0)
    , field2()
    , field3(0.0)
    , field4(0.0)  {
    }
  Unmigrated_(const ContainerAllocator& _alloc)
    : field1(0)
    , field2(_alloc)
    , field3(0.0)
    , field4(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _field1_type;
  _field1_type field1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _field2_type;
  _field2_type field2;

   typedef float _field3_type;
  _field3_type field3;

   typedef double _field4_type;
  _field4_type field4;





  typedef boost::shared_ptr< ::test_rosbag::Unmigrated_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_rosbag::Unmigrated_<ContainerAllocator> const> ConstPtr;

}; // struct Unmigrated_

typedef ::test_rosbag::Unmigrated_<std::allocator<void> > Unmigrated;

typedef boost::shared_ptr< ::test_rosbag::Unmigrated > UnmigratedPtr;
typedef boost::shared_ptr< ::test_rosbag::Unmigrated const> UnmigratedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_rosbag::Unmigrated_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_rosbag::Unmigrated_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_rosbag::Unmigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::Unmigrated_<ContainerAllocator2> & rhs)
{
  return lhs.field1 == rhs.field1 &&
    lhs.field2 == rhs.field2 &&
    lhs.field3 == rhs.field3 &&
    lhs.field4 == rhs.field4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_rosbag::Unmigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::Unmigrated_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_rosbag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::Unmigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::Unmigrated_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::Unmigrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::Unmigrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::Unmigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::Unmigrated_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_rosbag::Unmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fed3471829c6040a8c84cd6c04ec5ab2";
  }

  static const char* value(const ::test_rosbag::Unmigrated_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfed3471829c6040aULL;
  static const uint64_t static_value2 = 0x8c84cd6c04ec5ab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_rosbag::Unmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_rosbag/Unmigrated";
  }

  static const char* value(const ::test_rosbag::Unmigrated_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_rosbag::Unmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   field1 #12\n"
"string  field2 #\"uuiasjs\"\n"
"float32 field3 #61.7\n"
"float64 field4 #123.4\n"
;
  }

  static const char* value(const ::test_rosbag::Unmigrated_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_rosbag::Unmigrated_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.field1);
      stream.next(m.field2);
      stream.next(m.field3);
      stream.next(m.field4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Unmigrated_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_rosbag::Unmigrated_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_rosbag::Unmigrated_<ContainerAllocator>& v)
  {
    s << indent << "field1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.field1);
    s << indent << "field2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.field2);
    s << indent << "field3: ";
    Printer<float>::stream(s, indent + "  ", v.field3);
    s << indent << "field4: ";
    Printer<double>::stream(s, indent + "  ", v.field4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROSBAG_MESSAGE_UNMIGRATED_H
