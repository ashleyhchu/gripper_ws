// Generated by gencpp from file test_rosbag/SubUnmigrated.msg
// DO NOT EDIT!


#ifndef TEST_ROSBAG_MESSAGE_SUBUNMIGRATED_H
#define TEST_ROSBAG_MESSAGE_SUBUNMIGRATED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <test_rosbag/Unmigrated.h>

namespace test_rosbag
{
template <class ContainerAllocator>
struct SubUnmigrated_
{
  typedef SubUnmigrated_<ContainerAllocator> Type;

  SubUnmigrated_()
    : field1(0)
    , field2()  {
    }
  SubUnmigrated_(const ContainerAllocator& _alloc)
    : field1(0)
    , field2(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _field1_type;
  _field1_type field1;

   typedef  ::test_rosbag::Unmigrated_<ContainerAllocator>  _field2_type;
  _field2_type field2;





  typedef boost::shared_ptr< ::test_rosbag::SubUnmigrated_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_rosbag::SubUnmigrated_<ContainerAllocator> const> ConstPtr;

}; // struct SubUnmigrated_

typedef ::test_rosbag::SubUnmigrated_<std::allocator<void> > SubUnmigrated;

typedef boost::shared_ptr< ::test_rosbag::SubUnmigrated > SubUnmigratedPtr;
typedef boost::shared_ptr< ::test_rosbag::SubUnmigrated const> SubUnmigratedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_rosbag::SubUnmigrated_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_rosbag::SubUnmigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::SubUnmigrated_<ContainerAllocator2> & rhs)
{
  return lhs.field1 == rhs.field1 &&
    lhs.field2 == rhs.field2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_rosbag::SubUnmigrated_<ContainerAllocator1> & lhs, const ::test_rosbag::SubUnmigrated_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_rosbag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_rosbag::SubUnmigrated_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rosbag::SubUnmigrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rosbag::SubUnmigrated_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aa26f1425c68e8cf54c7adae649c1d9";
  }

  static const char* value(const ::test_rosbag::SubUnmigrated_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aa26f1425c68e8cULL;
  static const uint64_t static_value2 = 0xf54c7adae649c1d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_rosbag/SubUnmigrated";
  }

  static const char* value(const ::test_rosbag::SubUnmigrated_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32      field1 # 92\n"
"Unmigrated field2 # (12, \"uuiasjs\", 61.7)\n"
"\n"
"================================================================================\n"
"MSG: test_rosbag/Unmigrated\n"
"int32   field1 #12\n"
"string  field2 #\"uuiasjs\"\n"
"float32 field3 #61.7\n"
"float64 field4 #123.4\n"
;
  }

  static const char* value(const ::test_rosbag::SubUnmigrated_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.field1);
      stream.next(m.field2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubUnmigrated_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_rosbag::SubUnmigrated_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_rosbag::SubUnmigrated_<ContainerAllocator>& v)
  {
    s << indent << "field1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.field1);
    s << indent << "field2: ";
    s << std::endl;
    Printer< ::test_rosbag::Unmigrated_<ContainerAllocator> >::stream(s, indent + "  ", v.field2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROSBAG_MESSAGE_SUBUNMIGRATED_H
