// Generated by gencpp from file droidspeak/DroidEmotionRequest.msg
// DO NOT EDIT!


#ifndef DROIDSPEAK_MESSAGE_DROIDEMOTIONREQUEST_H
#define DROIDSPEAK_MESSAGE_DROIDEMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droidspeak
{
template <class ContainerAllocator>
struct DroidEmotionRequest_
{
  typedef DroidEmotionRequest_<ContainerAllocator> Type;

  DroidEmotionRequest_()
    : emotion(0)
    , duration()  {
    }
  DroidEmotionRequest_(const ContainerAllocator& _alloc)
    : emotion(0)
    , duration()  {
  (void)_alloc;
    }



   typedef uint8_t _emotion_type;
  _emotion_type emotion;

   typedef ros::Duration _duration_type;
  _duration_type duration;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(HAPPY)
  #undef HAPPY
#endif
#if defined(_WIN32) && defined(SORRY)
  #undef SORRY
#endif
#if defined(_WIN32) && defined(ANGRY)
  #undef ANGRY
#endif
#if defined(_WIN32) && defined(JADED)
  #undef JADED
#endif
#if defined(_WIN32) && defined(LOOK_LEFT)
  #undef LOOK_LEFT
#endif
#if defined(_WIN32) && defined(LOOK_RIGHT)
  #undef LOOK_RIGHT
#endif
#if defined(_WIN32) && defined(LOOK_UP)
  #undef LOOK_UP
#endif
#if defined(_WIN32) && defined(LOOK_DOWN)
  #undef LOOK_DOWN
#endif
#if defined(_WIN32) && defined(BLINK)
  #undef BLINK
#endif

  enum {
    NORMAL = 0u,
    HAPPY = 1u,
    SORRY = 2u,
    ANGRY = 3u,
    JADED = 4u,
    LOOK_LEFT = 5u,
    LOOK_RIGHT = 6u,
    LOOK_UP = 7u,
    LOOK_DOWN = 8u,
    BLINK = 9u,
  };


  typedef boost::shared_ptr< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DroidEmotionRequest_

typedef ::droidspeak::DroidEmotionRequest_<std::allocator<void> > DroidEmotionRequest;

typedef boost::shared_ptr< ::droidspeak::DroidEmotionRequest > DroidEmotionRequestPtr;
typedef boost::shared_ptr< ::droidspeak::DroidEmotionRequest const> DroidEmotionRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droidspeak::DroidEmotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droidspeak::DroidEmotionRequest_<ContainerAllocator1> & lhs, const ::droidspeak::DroidEmotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.emotion == rhs.emotion &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droidspeak::DroidEmotionRequest_<ContainerAllocator1> & lhs, const ::droidspeak::DroidEmotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droidspeak

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3121217addb14943825726ec606b461f";
  }

  static const char* value(const ::droidspeak::DroidEmotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3121217addb14943ULL;
  static const uint64_t static_value2 = 0x825726ec606b461fULL;
};

template<class ContainerAllocator>
struct DataType< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droidspeak/DroidEmotionRequest";
  }

  static const char* value(const ::droidspeak::DroidEmotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NORMAL=0\n"
"uint8 HAPPY=1\n"
"uint8 SORRY=2\n"
"uint8 ANGRY=3\n"
"uint8 JADED=4\n"
"uint8 LOOK_LEFT=5\n"
"uint8 LOOK_RIGHT=6\n"
"uint8 LOOK_UP=7\n"
"uint8 LOOK_DOWN=8\n"
"uint8 BLINK=9\n"
"\n"
"uint8 emotion\n"
"duration duration\n"
;
  }

  static const char* value(const ::droidspeak::DroidEmotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emotion);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroidEmotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droidspeak::DroidEmotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droidspeak::DroidEmotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "emotion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emotion);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DROIDSPEAK_MESSAGE_DROIDEMOTIONREQUEST_H
