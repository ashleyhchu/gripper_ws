// Generated by gencpp from file droidspeak/DroidChat.msg
// DO NOT EDIT!


#ifndef DROIDSPEAK_MESSAGE_DROIDCHAT_H
#define DROIDSPEAK_MESSAGE_DROIDCHAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace droidspeak
{
template <class ContainerAllocator>
struct DroidChat_
{
  typedef DroidChat_<ContainerAllocator> Type;

  DroidChat_()
    : data()
    , spaces()  {
    }
  DroidChat_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , spaces(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _spaces_type;
  _spaces_type spaces;





  typedef boost::shared_ptr< ::droidspeak::DroidChat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::droidspeak::DroidChat_<ContainerAllocator> const> ConstPtr;

}; // struct DroidChat_

typedef ::droidspeak::DroidChat_<std::allocator<void> > DroidChat;

typedef boost::shared_ptr< ::droidspeak::DroidChat > DroidChatPtr;
typedef boost::shared_ptr< ::droidspeak::DroidChat const> DroidChatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::droidspeak::DroidChat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::droidspeak::DroidChat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::droidspeak::DroidChat_<ContainerAllocator1> & lhs, const ::droidspeak::DroidChat_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.spaces == rhs.spaces;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::droidspeak::DroidChat_<ContainerAllocator1> & lhs, const ::droidspeak::DroidChat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace droidspeak

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::droidspeak::DroidChat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::droidspeak::DroidChat_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droidspeak::DroidChat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::droidspeak::DroidChat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droidspeak::DroidChat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::droidspeak::DroidChat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::droidspeak::DroidChat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14b3c1f13ca46764581966919c8bdd15";
  }

  static const char* value(const ::droidspeak::DroidChat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14b3c1f13ca46764ULL;
  static const uint64_t static_value2 = 0x581966919c8bdd15ULL;
};

template<class ContainerAllocator>
struct DataType< ::droidspeak::DroidChat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "droidspeak/DroidChat";
  }

  static const char* value(const ::droidspeak::DroidChat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::droidspeak::DroidChat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string data\n"
"float32[] spaces\n"
;
  }

  static const char* value(const ::droidspeak::DroidChat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::droidspeak::DroidChat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.spaces);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroidChat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::droidspeak::DroidChat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::droidspeak::DroidChat_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
    s << indent << "spaces[]" << std::endl;
    for (size_t i = 0; i < v.spaces.size(); ++i)
    {
      s << indent << "  spaces[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.spaces[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DROIDSPEAK_MESSAGE_DROIDCHAT_H
